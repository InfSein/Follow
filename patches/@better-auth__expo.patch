diff --git a/dist/client.d.mts b/dist/client.d.mts
index 18ba4d7c28bf852563b5e770748a6cd2f4ddcc38..ae7c523135b2c956b628a543176a65f9e0370ab9 100644
--- a/dist/client.d.mts
+++ b/dist/client.d.mts
@@ -5,7 +5,7 @@ import { Store } from 'better-auth';
 
 interface ExpoClientOptions {
     scheme?: string;
-    storage?: {
+    storage: {
         setItem: (key: string, value: string) => any;
         getItem: (key: string) => string | null;
     };
diff --git a/dist/client.d.ts b/dist/client.d.ts
index 18ba4d7c28bf852563b5e770748a6cd2f4ddcc38..ae7c523135b2c956b628a543176a65f9e0370ab9 100644
--- a/dist/client.d.ts
+++ b/dist/client.d.ts
@@ -5,7 +5,7 @@ import { Store } from 'better-auth';
 
 interface ExpoClientOptions {
     scheme?: string;
-    storage?: {
+    storage: {
         setItem: (key: string, value: string) => any;
         getItem: (key: string) => string | null;
     };
diff --git a/dist/client.js b/dist/client.js
index bd740d1eddb6662bcef27b72283cf36db62b9ff5..b8438930b2dc8670526539eb376143184624d641 100644
--- a/dist/client.js
+++ b/dist/client.js
@@ -1 +1,155 @@
-"use strict";var O=Object.create;var m=Object.defineProperty;var R=Object.getOwnPropertyDescriptor;var A=Object.getOwnPropertyNames;var I=Object.getPrototypeOf,U=Object.prototype.hasOwnProperty;var P=(e,t)=>{for(var s in t)m(e,s,{get:t[s],enumerable:!0})},y=(e,t,s,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let r of A(t))!U.call(e,r)&&r!==s&&m(e,r,{get:()=>t[r],enumerable:!(i=R(t,r))||i.enumerable});return e};var f=(e,t,s)=>(s=e!=null?O(I(e)):{},y(t||!e||!e.__esModule?m(s,"default",{value:e,enumerable:!0}):s,e)),N=e=>y(m({},"__esModule",{value:!0}),e);var $={};P($,{expoClient:()=>D,getCookie:()=>k});module.exports=N($);var x=f(require("expo-web-browser")),b=f(require("expo-linking")),p=require("react-native"),v=f(require("expo-secure-store")),h=f(require("expo-constants"));function B(e){let t=new Map;return e.split(", ").forEach(i=>{let[r,...c]=i.split("; "),[l,u]=r.split("="),n={value:u};c.forEach(o=>{let[a,g]=o.split("=");n[a.toLowerCase()]=g}),t.set(l,n)}),t}function w(e){let t=B(e),s={};return t.forEach((i,r)=>{let c=i.expires,l=i["max-age"],u=c?new Date(String(c)):l?new Date(Date.now()+Number(l)):null;s[r]={value:i.value,expires:u}}),JSON.stringify(s)}function k(e){let t={};try{t=JSON.parse(e)}catch{}return Object.entries(t).reduce((i,[r,c])=>c.expires&&c.expires<new Date?i:`${i}; ${r}=${c.value}`,"")}function E(e){return b.createURL("",{scheme:e})}var D=e=>{let t=null,s=`${e?.storagePrefix||"better-auth"}_cookie`,i=`${e?.storagePrefix||"better-auth"}_session_data`,r=e?.storage||v,c=p.Platform.OS==="web",l=e?.scheme||h.default.expoConfig?.scheme||h.default.platform?.scheme,u=Array.isArray(l)?l[0]:l;if(!u&&!c)throw new Error("Scheme not found in app.json. Please provide a scheme in the options.");return{id:"expo",getActions(n,o){if(p.Platform.OS!=="web"){t=o;let a=r.getItem(s);a&&o.atoms.session.set({data:JSON.parse(a),error:null,isPending:!1})}return{getCookie:()=>{let a=r.getItem(s);return k(a||"{}")}}},fetchPlugins:[{id:"expo",name:"Expo",hooks:{async onSuccess(n){if(c)return;let o=n.response.headers.get("set-cookie");if(o){let a=w(o||"");await r.setItem(s,a),t?.notify("$sessionSignal")}if(n.request.url.toString().includes("/get-session")&&!e?.disableCache){let a=n.data;r.setItem(i,JSON.stringify(a))}if(n.data?.redirect&&n.request.url.toString().includes("/sign-in")&&!n.request?.body.includes("idToken")){let g=JSON.parse(n.request.body)?.callbackURL,d=n.data?.url,S=await x.openAuthSessionAsync(d,g);if(S.type!=="success")return;let L=new URL(S.url),C=String(L.searchParams.get("cookie"));if(!C)return;r.setItem(s,w(C)),t?.notify("$sessionSignal")}}},async init(n,o){if(c)return{url:n,options:{...o,signal:new AbortController().signal}};o=o||{};let a=r.getItem(s),g=k(a||"{}");if(o.credentials="omit",o.headers={...o.headers,cookie:g,"expo-origin":E(u)},o.body?.callbackURL&&o.body.callbackURL.startsWith("/")){let d=b.createURL(o.body.callbackURL,{scheme:u});o.body.callbackURL=d}return n.includes("/sign-out")&&(await r.setItem(s,"{}"),t?.atoms.session?.set({data:null,error:null,isPending:!1}),r.setItem(i,"{}")),{url:n,options:{...o,signal:new AbortController().signal}}}}]}};0&&(module.exports={expoClient,getCookie});
+"use strict"
+var O = Object.create
+var m = Object.defineProperty
+var R = Object.getOwnPropertyDescriptor
+var A = Object.getOwnPropertyNames
+var I = Object.getPrototypeOf,
+  U = Object.prototype.hasOwnProperty
+var P = (e, t) => {
+    for (var s in t) m(e, s, { get: t[s], enumerable: !0 })
+  },
+  y = (e, t, s, i) => {
+    if ((t && typeof t == "object") || typeof t == "function")
+      for (let r of A(t))
+        !U.call(e, r) &&
+          r !== s &&
+          m(e, r, { get: () => t[r], enumerable: !(i = R(t, r)) || i.enumerable })
+    return e
+  }
+var f = (e, t, s) => (
+    (s = e != null ? O(I(e)) : {}),
+    y(t || !e || !e.__esModule ? m(s, "default", { value: e, enumerable: !0 }) : s, e)
+  ),
+  N = (e) => y(m({}, "__esModule", { value: !0 }), e)
+var $ = {}
+P($, { expoClient: () => D, getCookie: () => k })
+module.exports = N($)
+var x = f(require("expo-web-browser")),
+  b = f(require("expo-linking")),
+  p = require("react-native"),
+  h = f(require("expo-constants"))
+function B(e) {
+  let t = new Map()
+  return (
+    e.split(", ").forEach((i) => {
+      let [r, ...c] = i.split("; "),
+        [l, u] = r.split("="),
+        n = { value: u }
+      c.forEach((o) => {
+        let [a, g] = o.split("=")
+        n[a.toLowerCase()] = g
+      }),
+        t.set(l, n)
+    }),
+    t
+  )
+}
+function w(e) {
+  let t = B(e),
+    s = {}
+  return (
+    t.forEach((i, r) => {
+      let c = i.expires,
+        l = i["max-age"],
+        u = c ? new Date(String(c)) : l ? new Date(Date.now() + Number(l)) : null
+      s[r] = { value: i.value, expires: u }
+    }),
+    JSON.stringify(s)
+  )
+}
+function k(e) {
+  let t = {}
+  try {
+    t = JSON.parse(e)
+  } catch {}
+  return Object.entries(t).reduce(
+    (i, [r, c]) => (c.expires && c.expires < new Date() ? i : `${i}; ${r}=${c.value}`),
+    "",
+  )
+}
+function E(e) {
+  return b.createURL("", { scheme: e })
+}
+var D = (e) => {
+  let t = null,
+    s = `${e?.storagePrefix || "better-auth"}_cookie`,
+    i = `${e?.storagePrefix || "better-auth"}_session_data`,
+    r = e?.storage,
+    c = p.Platform.OS === "web",
+    l = e?.scheme || h.default.expoConfig?.scheme || h.default.platform?.scheme,
+    u = Array.isArray(l) ? l[0] : l
+  if (!u && !c)
+    throw new Error("Scheme not found in app.json. Please provide a scheme in the options.")
+  return {
+    id: "expo",
+    getActions(n, o) {
+      if (p.Platform.OS !== "web") {
+        t = o
+        let a = r.getItem(s)
+        a && o.atoms.session.set({ data: JSON.parse(a), error: null, isPending: !1 })
+      }
+      return {
+        getCookie: () => {
+          let a = r.getItem(s)
+          return k(a || "{}")
+        },
+      }
+    },
+    fetchPlugins: [
+      {
+        id: "expo",
+        name: "Expo",
+        hooks: {
+          async onSuccess(n) {
+            if (c) return
+            let o = n.response.headers.get("set-cookie")
+            if (o) {
+              let a = w(o || "")
+              await r.setItem(s, a), t?.notify("$sessionSignal")
+            }
+            if (n.request.url.toString().includes("/get-session") && !e?.disableCache) {
+              let a = n.data
+              r.setItem(i, JSON.stringify(a))
+            }
+            if (
+              n.data?.redirect &&
+              n.request.url.toString().includes("/sign-in") &&
+              !n.request?.body.includes("idToken")
+            ) {
+              let g = JSON.parse(n.request.body)?.callbackURL,
+                d = n.data?.url,
+                S = await x.openAuthSessionAsync(d, g)
+              if (S.type !== "success") return
+              let L = new URL(S.url),
+                C = String(L.searchParams.get("cookie"))
+              if (!C) return
+              r.setItem(s, w(C)), t?.notify("$sessionSignal")
+            }
+          },
+        },
+        async init(n, o) {
+          if (c) return { url: n, options: { ...o, signal: new AbortController().signal } }
+          o = o || {}
+          let a = r.getItem(s),
+            g = k(a || "{}")
+          if (
+            ((o.credentials = "omit"),
+            (o.headers = { ...o.headers, cookie: g, "expo-origin": E(u) }),
+            o.body?.callbackURL && o.body.callbackURL.startsWith("/"))
+          ) {
+            let d = b.createURL(o.body.callbackURL, { scheme: u })
+            o.body.callbackURL = d
+          }
+          return (
+            n.includes("/sign-out") &&
+              (await r.setItem(s, "{}"),
+              t?.atoms.session?.set({ data: null, error: null, isPending: !1 }),
+              r.setItem(i, "{}")),
+            { url: n, options: { ...o, signal: new AbortController().signal } }
+          )
+        },
+      },
+    ],
+  }
+}
+0 && (module.exports = { expoClient, getCookie })
